{
  "name": "ChirpStack Uplink Converter for Milesight VS133",
  "type": "UPLINK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 1733331880270
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName = \"VS133 \" + data.deviceInfo.devEui;\nvar deviceType = \"VS133\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": [{\"ts\": 1...1, \"values\": {\"telemetryKey\":\"telemetryValue\"}, {\"ts\": 1...2, \"values\":                      {\"telemetryKey\":\"telemetryValue\"}}]\n//  }\n\nfunction decodePayload(input) {\n    var output = {\n        attributes: {},\n        telemetry: []\n    };\n    \n    var total_in_chns = [0x03, 0x06, 0x09, 0x0c];\n    var total_out_chns = [0x04, 0x07, 0x0a, 0x0d];\n    var period_chns = [0x05, 0x08, 0x0b, 0x0e];\n\n    // --- Decoding code --- //\n    var decoded = {};\n    var fPort = data.fPort;\n    if(fPort == 85) {\n        for(var i = 0; i < input.length - 2; ) {\n            var channel_id = input[i++] & 0xff;\n            var channel_type = input[i++] & 0xff;\n            \n             // LINE TOTAL IN\n            if (includes(total_in_chns, channel_id) && channel_type === 0xd2) {\n                var channel_in_name = \"line_\" + ((channel_id - total_in_chns[0]) / 3 + 1);\n                decoded[channel_in_name + \"_total_in\"] = parseBytesToInt(input, i, 4, false); \n                i += 4;\n            }\n            // LINE TOTAL OUT\n            else if (includes(total_out_chns, channel_id) && channel_type === 0xd2) {\n                var channel_out_name = \"line_\" + ((channel_id - total_out_chns[0]) / 3 + 1);\n                decoded[channel_out_name + \"_total_out\"] = parseBytesToInt(input, i, 4, false); \n                i += 4;\n            }\n            // LINE PERIOD\n            else if (includes(period_chns, channel_id) && channel_type === 0xcc) {\n                var channel_period_name = \"line_\" + ((channel_id - period_chns[0]) / 3 + 1);\n                decoded[channel_period_name + \"_period_in\"] = parseBytesToInt(input, i, 2, false); \n                decoded[channel_period_name + \"_period_out\"] = parseBytesToInt(input, i + 2, 2, false); \n                i += 4;\n            }\n            // REGION COUNT\n            else if (channel_id === 0x0f && channel_type === 0xe3) {\n                decoded.region_1_count = input[i];\n                decoded.region_2_count = input[i + 1];\n                decoded.region_3_count = input[i + 2];\n                decoded.region_4_count = input[i + 3];\n                i += 4;\n            }\n            // REGION DWELL TIME\n            else if (channel_id === 0x10 && channel_type === 0xe4) {\n                var dwell_channel_name = \"region_\" + input[i];\n                decoded[dwell_channel_name + \"_avg_dwell\"] = parseBytesToInt(input, i + 1, 2, false); \n                decoded[dwell_channel_name + \"_max_dwell\"] = parseBytesToInt(input, i + 3, 2, false); \n                i += 5;\n            }\n        }\n    }\n\n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n    \n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\nvar dateString = data.time;\ntimestamp = parseDateToTimestamp(dateString);\n// --- Timestamp parsing\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(base64ToBytes(data.data));\n\n\nattributes.eui = data.deviceInfo.devEui;\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nattributes.eui = data.deviceInfo.?devEui;\nattributes.devAddr = data.devAddr;\nattributes.fPort = data.fPort;\nattributes.applicationId = data.deviceInfo.?applicationId;\nattributes.applicationName = data.deviceInfo.?applicationName;\nattributes.tenantId = data.deviceInfo.?tenantId;\nattributes.tenantName = data.deviceInfo.?tenantName;\nattributes.deviceProfileId = data.deviceInfo.?deviceProfileId;\nattributes.deviceProfileName = data.deviceInfo.?deviceProfileName;\nattributes.frequency = data.txInfo.?frequency;\nattributes.bandwidth = data.txInfo.?modulation.?lora.?bandwidth;\nattributes.spreadingFactor = data.txInfo.?modulation.?lora.?spreadingFactor;\nattributes.codeRate = data.txInfo.?modulation.?lora.?codeRate;\n\nif(Boolean.parseBoolean(metadata[\"includeGatewayInfo\"])) {\n   var gatewayInfo = getGatewayInfo();\n   var addDataToTelemetry = {};\n   addDataToTelemetry.snr = gatewayInfo.snr;\n   addDataToTelemetry.rssi = gatewayInfo.rssi;\n   addDataToTelemetry.channel = gatewayInfo.channel;\n   addDataToTelemetry.rfChain = gatewayInfo.rfChain;\n   addDataToTelemetry.fCnt = data.fCnt;\n   \n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar result = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n    //  assetName: assetName,\n    //  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry\n};\n\naddAdditionalInfoForDeviceMsg(result, customerName, groupName);\n\nreturn result;\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction parseDateToTimestamp(dateString) {\n    var date = new Date(dateString);\n    var timestamp = date.getTime();\n   \n    // If we cannot parse timestamp - we will use the current timestamp\n    if (timestamp == -1) {\n        timestamp = Date.now();\n    }\n    \n    return timestamp;\n}\n\nfunction getGatewayInfo() {\n    var gatewayList = data.rxInfo;\n    var maxRssi = Integer.MIN_VALUE;\n    var gatewayInfo = {};\n    \n    foreach (gateway : gatewayList) {\n        if(gateway.rssi > maxRssi) {\n            maxRssi = gateway.rssi;\n            gatewayInfo = gateway;\n        }\n    }\n    \n    return gatewayInfo;\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size >= 1) {\n        telemetry = addDataToTelemetries(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToTelemetries(telemetries, addDataToTelemetry) {\n    foreach(telemetry : telemetries) {\n        foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[\"values\"].keys.contains(element.key)) {\n                telemetry[\"values\"][element.key] = element.value;\n            }\n        } \n    }\n    \n    return telemetries;\n}\n\nfunction includes(datas, value) {\n    var size = datas.length;\n    for (var i = 0; i < size; i++) {\n        if (datas[i] == value) {\n            return true;\n        }\n    }\n    return false;\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "deviceProfileId",
      "deviceProfileName",
      "devAddr",
      "fPort",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "channel",
      "rfChain",
      "eui",
      "battery"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}