{
  "name": "ChirpStack Downlink Converter for MClimate 16ASPM",
  "type": "DOWNLINK",
  "integrationType": "CHIRPSTACK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 0
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": null,
    "encoder": null,
    "tbelEncoder": "// Encode downlink data from incoming Rule Engine message\n\n// msg - JSON message payload downlink message json\n// msgType - type of message, for ex. 'ATTRIBUTES_UPDATED', 'POST_TELEMETRY_REQUEST', etc.\n// metadata - list of key-value pairs with additional data about the message\n// integrationMetadata - list of key-value pairs with additional data defined in Integration executing this converter\n\n/** Encoder **/\n\nvar data = [];\n\n// Process data from incoming message and metadata\n\nvar method = msg.method;\nvar params = JSON.parse(msg.params);\n\nswitch (method) {\n    case \"setKeepAlive\":\n        data.push(0x02);\n        data.push(params.setKeepAlive);\n        break;\n    case \"getKeepAliveTime\":\n        data.push(0x12);\n        break;\n    case \"getDeviceVersions\":\n        data.push(0x04);\n        break;\n    case \"setJoinRetryPeriod\":\n        var periodToPass = Math.floor((params.setJoinRetryPeriod * 60) / 5);\n        data.push(0x10);\n        data.push(periodToPass);\n        break;\n    case \"getJoinRetryPeriod\":\n        data.push(0x19);\n        break;\n    case \"setUplinkType\":\n        data.push(0x11);\n        data.push(params.setUplinkType);\n        break;\n    case \"getUplinkType\":\n        data.push(0x1b);\n        break;\n    case \"setWatchDogParams\":\n        data.push(0x1c);\n        data.push(params.setWatchDogParams.confirmedUplinks);\n        data.push(params.setWatchDogParams.unconfirmedUplinks);\n        break;\n    case \"getWatchDogParams\":\n        data.push(0x1d);\n        break;\n    case \"setOverheatingThresholds\":\n        data.push(0x1e);\n        data.push(params.setOverheatingThresholds.trigger);\n        data.push(params.setOverheatingThresholds.recovery);\n        break;\n    case \"getOverheatingThresholds\":\n        data.push(0x1f);\n        break;\n    case \"setOvervoltageThresholds\":\n        data.push(0x20);\n        data.push(params.setOvervoltageThresholds.trigger);\n        data.push(params.setOvervoltageThresholds.recovery);\n        break;\n    case \"getOvervoltageThresholds\":\n        data.push(0x21);\n        break;\n    case \"setOvercurrentThreshold\":\n        data.push(0x22);\n        data.push(params.setOvercurrentThreshold);\n        break;\n    case \"getOvercurrentThreshold\":\n        data.push(0x23);\n        break;\n    case \"setOverpowerThreshold\":\n        data.push(0x24);\n        data.push(params.setOverpowerThreshold);\n        break;\n    case \"getOverpowerThreshold\":\n        data.push(0x25);\n        break;\n    case \"setAfterOverheatingProtectionRecovery\":\n        data.push(0x59);\n        data.push(params.setAfterOverheatingProtectionRecovery);\n        break;\n    case \"getAfterOverheatingProtectionRecovery\":\n        data.push(0x5a);\n        break;\n    case \"setLedIndicationMode\":\n        data.push(0x5b);\n        data.push(params.setLedIndicationMode);\n        break;\n    case \"getLedIndicationMode\":\n        data.push(0x5c);\n        break;\n    case \"setRelayRecoveryState\":\n        data.push(0x5e);\n        data.push(params.setRelayRecoveryState);\n        break;\n    case \"getRelayRecoveryState\":\n        data.push(0x5f);\n        break;\n    case \"setRelayState\":\n        data.push(0xc1);\n        data.push(params.setRelayState);\n        break;\n    case \"getRelayState\":\n        data.push(0xb1);\n        break;\n    case \"getOverheatingEvents\":\n        data.push(0x60);\n        break;\n    case \"getOvervoltageEvents\":\n        data.push(0x61);\n        break;\n    case \"getOvercurrentEvents\":\n        data.push(0x62);\n        break;\n    case \"getOverpowerEvents\":\n        data.push(0x63);\n        break;\n    case \"getOverheatingRecoveryTime\":\n        data.push(0x70);\n        break;\n    case \"getOvervoltageRecoveryTime\":\n        data.push(0x71);\n        break;\n    case \"getOvercurrentRecoveryTemp\":\n        data.push(0x72);\n        break;\n    case \"getOverpowerRecoveryTemp\":\n        data.push(0x73);\n        break;\n    case \"sendCustomHexCommand\":\n        var sendCustomHexCommand = params.sendCustomHexCommand;\n        for (i = 0; i < sendCustomHexCommand.length; i += 2) {\n            var byteValue = parseInt(sendCustomHexCommand.substr(i, 2), 16);\n            data.push(byteValue);\n        }\n        break;\n    default:\n        break;\n}\n\n// Result object with encoded downlink payload\nvar result = {\n    contentType: \"TEXT\",\n    // downlink data\n    data: bytesToBase64(data),\n    metadata: {\n        \"fPort\": 2,\n        \"DevEUI\": \"1000000000000001\"\n    }\n};\n\nreturn result;",
    "updateOnlyKeys": null
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false,
  "converterVersion": 1
}