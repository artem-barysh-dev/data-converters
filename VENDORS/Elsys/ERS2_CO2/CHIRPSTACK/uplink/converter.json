{
  "name": "ChirpStack Uplink Converter for Elsys ERS2 CO2",
  "type": "UPLINK",
  "integrationType": "CHIRPSTACK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 0
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "// If you want to override configuration from converter you can set value instead of null to variables below.\nvar entityType = null; // Entity type allows you to choose type of created entity. Can be DEVICE or ASSET.\nvar name = null; // Device or asset name.\nvar profile = null; // Device or asset profile name.\nvar group = null; // If group is not null - created entity will be added to the entity group with such name.\nvar customer = null; // If customer is not null - created entity will be assigned to customer with such name.\n\n// If you want to parse incoming data somehow, you can add your code to decodePayload function.\n// input: bytes\n// Note ts represents a timestamp in milliseconds since the Unix epoch (January 1, 1970)\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": [{\"ts\": 1730898982391, \"values\": {\"telemetryKey\":\"telemetryValue\"}, {\"ts\": 1730518182391, \"values\": {\"telemetryKey\":\"telemetryValue\"}}]\n//  }\n\nfunction decodePayload(input) {\n    var output = {\n        attributes: {},\n        telemetry: []\n    };\n\n    // --- Timestamp parsing\n    var dateString = metadata.time;\n    timestamp = parseDateToTimestamp(dateString);\n    // --- Timestamp parsing\n\n    var decoded = {}; // Key/value telemetry object.\n    for (var i = 0; i < input.length;) {\n        var type = input[i++] & 0xff;\n        \n        if (type == 0x01) { \n            // Temperature Converts to °C\n            decoded.temperature = parseBytesToInt(input, i, 2, true) / 10;\n            i += 2;\n        } else if (type == 0x02) { // Humidity\n            decoded.humidity = input[i];\n            i += 1;\n        } else if (type == 0x04) { // Light\n            decoded.light = parseBytesToInt(input, i, 2, true);\n            i += 2;\n        } else if (type == 0x05) { // Pir\n            decoded.pir = input[i];\n            i += 1;\n        } else if (type == 0x06) { // CO₂\n            decoded.co2 = parseBytesToInt(input, i, 2, true);\n            i += 2;\n        } else if (type == 0x07) { // Battery Voltage (VDD)\n            decoded.vdd = parseBytesToInt(input, i, 2, true);   \n            i += 2;\n        }\n    }\n    \n\n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n\n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(payload);\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\nvar result = {\n    type: entityType,\n    name: name,\n    profile: profile,\n    customer: customer,\n    group: group,\n\n    attributes: attributes,\n    telemetry: telemetry\n};\n\nreturn result;\n\nfunction parseDateToTimestamp(dateString) {\n    var date = new Date(dateString);\n    var timestamp = date.getTime();\n\n    // If we cannot parse timestamp - we will use the current timestamp\n    if (timestamp == -1) {\n        timestamp = Date.now();\n    }\n\n    return timestamp;\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "eui",
      "devAddr",
      "fPort",
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "adr",
      "dr",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "deviceProfileName",
      "deviceProfileId"
    ],
    "type": "DEVICE",
    "name": "ERS2 CO2 $eui",
    "profile": "$deviceProfileName",
    "label": "$deviceName",
    "customer": "",
    "group": "",
    "telemetry": null,
    "attributes": [
      "eui",
      "devAddr",
      "fPort",
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "adr",
      "dr",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "deviceProfileName",
      "deviceProfileId"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false,
  "converterVersion": 2
}